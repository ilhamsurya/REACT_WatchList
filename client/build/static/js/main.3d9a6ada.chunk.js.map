{"version":3,"sources":["components/AppNavbar.js","actions/itemActions.js","actions/types.js","components/MovieList.js","reducers/itemReducer.js","reducers/index.js","store.js","components/ItemModel.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","toggle","setState","Navbar","color","dark","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","setItemsLoading","type","MovieList","onDeleteClick","id","props","deleteItem","getItems","items","item","ListGroup","TransitionGroup","map","_id","name","CSSTransition","key","timeout","classNames","ListGroupItem","Button","size","bind","connect","dispatch","axios","get","then","res","payload","data","delete","initialState","loading","combineReducers","action","filter","middleWare","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","ItemModal","modal","onChange","e","target","value","onSubmit","preventDefault","newItem","addItem","style","marginBottom","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","placeholder","marginTop","block","post","App","ItemModel","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d9a6ada.chunk.js","sourcesContent":["import React, {\r\n    Component\r\n} from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Container\r\n} from 'reactstrap';\r\n\r\nclass AppNavbar extends Component {\r\n\r\n\r\n    state = {\r\n        isOpen: false\r\n    }\r\n    //(1) Create Custom Toggle\r\n    toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n            <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\r\n                <Container>\r\n                    <NavbarBrand href=\"/\">\r\n                        WatchList\r\n                    </NavbarBrand>\r\n                    <NavbarToggler onClick={this.toggle}/>\r\n                    <Collapse isOpen={this.state.isOpen} navbar>\r\n                        <Nav className = 'ml-auto' navbar>\r\n                            <NavItem>\r\n                                <NavLink href=\"https://www.imdb.com/\">\r\n                                    IMDB\r\n                                </NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                    </Collapse>\r\n\r\n                </Container>\r\n            </Navbar>\r\n        </div>\r\n        );\r\n      \r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default AppNavbar;","import axios from 'axios';\r\nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from './types';\r\n\r\nexport const getItems = () => dispatch => {\r\n  dispatch(setItemsLoading());\r\n  axios.get('/api/items').then(res =>\r\n    dispatch({\r\n      type: GET_ITEMS,\r\n      payload: res.data\r\n    })\r\n  );\r\n};\r\n\r\nexport const addItem = item => dispatch => {\r\n  axios.post('/api/items', item).then(res =>\r\n    dispatch({\r\n      type: ADD_ITEM,\r\n      payload: res.data\r\n    })\r\n  );\r\n};\r\n\r\nexport const deleteItem = id => dispatch => {\r\n  axios.delete(`/api/items/${id}`).then(res =>\r\n    dispatch({\r\n      type: DELETE_ITEM,\r\n      payload: id\r\n    })\r\n  );\r\n};\r\n\r\nexport const setItemsLoading = () => {\r\n  return {\r\n    type: ITEMS_LOADING\r\n  };\r\n};\r\n","export const GET_ITEMS = 'GET_ITEMS';\r\nexport const ADD_ITEM = 'ADD_ITEM';\r\nexport const DELETE_ITEM = 'DELETE_ITEM';\r\nexport const ITEMS_LOADING = 'ITEMS_LOADING';\r\n","import React, { Component } from 'react';\r\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport uuid from 'uuid';\r\nimport { connect } from 'react-redux';\r\nimport { getItems, deleteItem } from '../actions/itemActions';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass MovieList extends Component {\r\n  componentDidMount() {\r\n    this.props.getItems();\r\n  }\r\n\r\n  onDeleteClick = id => {\r\n    this.props.deleteItem(id);\r\n  };\r\n\r\n  render() {\r\n    const { items } = this.props.item;\r\n\r\n    return (\r\n      <Container>\r\n        <ListGroup>\r\n          <TransitionGroup className=\"movie-list\">\r\n            {items.map(({ _id, name }) => (\r\n              <CSSTransition key={_id} timeout={400} classNames=\"fade\">\r\n                <ListGroupItem>\r\n                  <Button\r\n                    className=\"remove-btn\"\r\n                    color=\"danger\"\r\n                    size=\"sm\"\r\n                    onClick={this.onDeleteClick.bind(this, _id)}\r\n                  >\r\n                    &times;\r\n                  </Button>\r\n                  {name}\r\n                </ListGroupItem>\r\n              </CSSTransition>\r\n            ))}\r\n          </TransitionGroup>\r\n        </ListGroup>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nMovieList.propTypes = {\r\n  getItems: PropTypes.func.isRequired,\r\n  item: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  item: state.item\r\n});\r\n\r\nexport default connect(mapStateToProps, { getItems, deleteItem })(MovieList);\r\n","import {\r\n  GET_ITEMS,\r\n  ADD_ITEM,\r\n  DELETE_ITEM,\r\n  ITEMS_LOADING\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n  items: [],\r\n  loading: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ITEMS:\r\n      return {\r\n        ...state,\r\n        items: action.payload,\r\n        loading: false\r\n      };\r\n    case DELETE_ITEM:\r\n      return {\r\n        ...state,\r\n        items: state.items.filter(item => item._id !== action.payload)\r\n      };\r\n    case ADD_ITEM:\r\n      return {\r\n        ...state,\r\n        items: [action.payload, ...state.items]\r\n      };\r\n    case ITEMS_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport itemReducer from './itemReducer';\r\n\r\nexport default combineReducers({\r\n  item: itemReducer\r\n});\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleWare = [thunk];\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeEnhancers(applyMiddleware(...middleWare))\r\n);\r\n\r\nexport default store;","import React, { Component } from 'react';\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input\r\n} from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { addItem } from '../actions/itemActions';\r\n\r\n\r\nclass ItemModal extends Component {\r\n  state = {\r\n    modal: false,\r\n    name: ''\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      modal: !this.state.modal\r\n    });\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const newItem = {\r\n  \r\n      name: this.state.name\r\n    };\r\n\r\n    // Add Movie (add Item Action)\r\n    this.props.addItem(newItem);\r\n\r\n    //Close Modal\r\n    this.toggle();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button\r\n          color=\"dark\"\r\n          style={{ marginBottom: '2rem' }}\r\n          onClick={this.toggle}\r\n        >\r\n          Add Item\r\n        </Button>\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n          <ModalHeader toggle={this.toggle}>\r\n            Add To Your Watchlist\r\n            <ModalBody>\r\n              <Form onSubmit={this.onSubmit}>\r\n                <FormGroup>\r\n                  <Label for=\"item\">Movie</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    id=\"item\"\r\n                    placeholder=\"add Watch List\"\r\n                    onChange={this.onChange}\r\n                  ></Input>\r\n                  <Button color=\"dark\" style={{ marginTop: '2rem' }} block>\r\n                    Add Movie\r\n                  </Button>\r\n                </FormGroup>\r\n              </Form> \r\n            </ModalBody>\r\n          </ModalHeader>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps  = state => ({\r\n  item: state.item\r\n});\r\n\r\nexport default connect(mapStateToProps, { addItem })(ItemModal);\r\n","import React, { Component } from 'react';\nimport AppNavbar from './components/AppNavbar';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport MovieList from './components/MovieList';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport ItemModel from './components/ItemModel';\nimport { Container } from 'reactstrap';\n\nclass App extends Component {\n  render() {\n    return (\n      //Wrap all in order to use REDUX,\n      <Provider store={store}>\n        <div className=\"App\">\n          <AppNavbar />\n          <Container>\n            <ItemModel />\n            <MovieList />\n          </Container>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}